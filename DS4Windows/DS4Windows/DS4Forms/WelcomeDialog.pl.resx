<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="$this.Text" xml:space="preserve">
    <value>Witamy w DS4Windows</value>
  </data>
  <data name="bnFinish.Text" xml:space="preserve">
    <value>Zakończ</value>
  </data>
  <data name="bnStep1.Text" xml:space="preserve">
    <value>Krok 1: zainstaluj sterownik DS4</value>
    <comment>步驟一：安裝 DS4 驅動程式</comment>
  </data>
  <data name="button2.Text" xml:space="preserve">
    <value>Krok 2: jeśli używasz Windows 7 lub wcześniejszej wersji, zainstaluj sterownik kontrolera X360</value>
    <comment>步驟二：如果是 Windows 7 或以下版本，安裝 360 驅動程式</comment>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>Jeśli to okno pojawi się po instalacji musisz zresetować komputer lub poczekać 10-15min aby system Windows wykrył sterownik</value>
    <comment>如果在安裝後，該視窗重新出現，您可能需要重新啟動你的電腦或者等待10-15分鐘為讓Windows去注意到驅動程式</comment>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>Jeśli używałeś kontrolera X360 na tym komputerze możesz pominąć ten krok</value>
    <comment>如果你在這台電腦上已經使用了360控制器，你可以跳過這個</comment>
  </data>
  <data name="labelBluetooth.Text" xml:space="preserve">
    <value>Aby podłączyć Bluetooth (opcjonalne):
Przytrzymaj przycisk SHARE i PS przez 3s tak aby lightbar zaczął błyskać</value>
    <comment>設置藍牙（可選）：
按住PS鍵和SHARE鍵3秒
光條將開始雙閃</comment>
  </data>
  <data name="labelBluetooth2.Text" xml:space="preserve">
    <value>Podczas błyskania lightbar przejdź do ustawień systemowych Bluetooth i połącz się
z "Wireless Controller". Jeśli to konieczne wpisz kod parowania "0000".
Po sparowaniu jesteś gotowy do akcji. Miłej zabawy!</value>
    <comment>一次的閃爍後到你的藍牙設定擋
並連接到 "無線控制器"
如果出現詢問視窗，輸入配對碼 "0000"
一旦配對成功，你就準備好了。玩得開心！</comment>
  </data>
  <data name="labelUSB.Text" xml:space="preserve">
    <value>Krok 3: podłączanie kontrolera DS4 przez kabel usb.
Zwyczajnie podłącz kontroler do komputera przez kabel micro usb.</value>
    <comment>第3步：連接 DUALSHOCK 4 控制器
建立 有線/USB：
只需將一條Micro USB線連接你的PC和 DUALSHOCK 4</comment>
  </data>
  <data name="linkBluetoothSettings.Text" xml:space="preserve">
    <value>Ustawienia Bluetooth</value>
    <comment>藍牙設定</comment>
  </data>
</root>